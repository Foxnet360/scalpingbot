# Scalping Bot for Binance Futures

An automated Python-based trading bot for Binance Futures that implements a 1-minute scalping strategy for cryptocurrency trading.

## Features

- Scalping strategy using Heikin Ashi candles, MACD and moving averages
- Configurable trading parameters via JSON file
- Support for multiple trading pairs on Binance Futures
- Real-time position monitoring and management
- Trade history tracking and reporting
- Optional filters for volatility, time, and trend direction
- Backtesting mode to test the strategy

## Installation

1. Clone this repository:
```bash
git clone https://github.com/Foxnet360/scalpingbot.git
cd scalpingbot
```

2. Install the required packages:
```bash
pip install -r requirements.txt
```

3. The `requirements.txt` file contains the following dependencies:
```
python-binance>=1.0.16
pandas>=1.3.5
numpy>=1.22.0
pyyaml>=6.0
ta>=0.10.2
```

4. Configure your API credentials and trading parameters in `config.json`

## Usage

1. Edit the `config.json` file to set your API credentials and trading parameters. Make sure to adjust the `atr_multiplier` based on your trading strategy.

2. Run the bot:
```bash
python trading_bot.py
```

3. Alternatively, specify a different configuration file:
```bash
python trading_bot.py custom_config.json
```

## Configuration

The `config.json` file contains all configurable parameters for the bot:

```json
{
    "api_key": "your_api_key",
    "api_secret": "your_api_secret",
    "symbol": "STXUSDT",
    "leverage": 5,
    "stop_loss_percent": 2,
    "take_profit_min": 1,
    "take_profit_max": 2,
    "position_size_percent": 50,
    "sma_period": 200,
    "use_heikin_ashi": true,
    "macd_fast": 12,
    "macd_slow": 26,
    "macd_signal": 9,
    "use_volatility_filter": true,
    "atr_period": 14,
    "atr_multiplier": 2.0,
    "timeframe": "1m"
}
```

## Trading Strategy

This bot implements a 1-minute scalping strategy with the following components:

- **Entry Conditions**:
  - **Long**: Price above SMA 200 + MACD bullish crossover + green Heikin Ashi candle
  - **Short**: Price below SMA 200 + MACD bearish crossover + red Heikin Ashi candle

- **Exit Conditions**:
  - Stop-loss: 1% from entry price
  - Take-profit: 2% to 3% from entry price

- **Risk Management**:
  - Configurable leverage (default: 5x)
  - Position size control
  - Optional volatility filter to avoid extreme market conditions

## Risk Warning

This software is for educational purposes only. Cryptocurrency trading involves significant risk and you can lose money. Use this bot at your own risk.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## How to Use

1. **Set Up Your Environment**: Ensure you have Python installed and the required packages from `requirements.txt`.

2. **Configure Your API**: Obtain your Binance API key and secret, and enter them in the `config.json` file.

3. **Adjust Trading Parameters**: Modify the trading parameters in `config.json` to suit your trading strategy, including the `atr_multiplier` for setting your Stop Loss and Take Profit levels based on market volatility.

4. **Run the Bot**: Execute the bot using the command line. Monitor the console for logs and updates on trades, including entry prices, Stop Loss, and Take Profit levels.

5. **Monitor Performance**: Keep an eye on the bot's performance and adjust parameters as necessary based on market conditions.

6. **Backtest**: Use the backtesting mode to test your strategy with historical data before trading with real funds.